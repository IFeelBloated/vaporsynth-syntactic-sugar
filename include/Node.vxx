#pragma once
#include "Frame.vxx"
#include "Metadata.vxx"

using NodeReference = Owner<VSNodeRef>;

struct Node : NodeReference {
	static constexpr auto DefaultRequestFunction = [](auto Index) { return std::vector{ Index }; };

private:
	struct RequestFunctionProxy {
		using QuantificationBoundForRequestFunction = auto(std::ptrdiff_t)->std::vector<std::ptrdiff_t>;
		using ExistentialTypeForRequestFunction = std::function<QuantificationBoundForRequestFunction>;

	public:
		field(HostedFunction, ExistentialTypeForRequestFunction{});

	public:
		auto& operator=(AnyBut<RequestFunctionProxy> auto&& RequestFunction) {
			if constexpr (requires { { RequestFunction(0_ptrdiff) }->std::same_as<std::vector<std::ptrdiff_t>>; })
				HostedFunction = Forward(RequestFunction);
			else
				HostedFunction = [RequestFunction = Forward(RequestFunction)](auto Index) {
					auto TypeErasedContainer = std::vector<std::ptrdiff_t>{};
					if constexpr (requires { { RequestFunction(Index) }->Iterable; })
						for (auto x : RequestFunction(Index))
							if constexpr (std::integral<decltype(x)>)
								TypeErasedContainer.push_back(x);
							else
								static_assert(sizeof(RequestFunction) == -1, "Node: frame index must be an integer.");
					else
						static_assert(sizeof(RequestFunction) == -1, "Node: RequestFunction must return an iterable container.");
					return TypeErasedContainer;
				};
			return *this;
		}
		auto operator()(auto Index) const {
			return HostedFunction(Index);
		}
	};

protected:
	template<typename NodeType>
	struct PaddingFunctionProxy {
		using QuantificationBoundForPaddingFunction = auto(const NodeType&, std::ptrdiff_t, FrameContextProxy)->FrameReference;
		using ExistentialTypeForPaddingFunction = std::function<QuantificationBoundForPaddingFunction>;

	public:
		field(HostedFunction, ExistentialTypeForPaddingFunction{});

	public:
		auto& operator=(AnyBut<PaddingFunctionProxy> auto&& PaddingFunction) {
			[[maybe_unused]] auto& PlaceholderNode = *static_cast<const NodeType*>(nullptr);
			if constexpr (requires { { PaddingFunction(PlaceholderNode, 0_ptrdiff, FrameContextProxy{}) }->SubtypeOf<FrameReference>; })
				HostedFunction = Forward(PaddingFunction);
			else if constexpr (requires { { PaddingFunction(PlaceholderNode, 0_ptrdiff) }->SubtypeOf<FrameReference>; })
				HostedFunction = [PaddingFunction = Forward(PaddingFunction)](auto& Clip, auto Index, auto...) {
					return PaddingFunction(Clip, Index);
				};
			else
				static_assert(sizeof(PaddingFunction) == -1, "Node: specified padding function has an incompatible signature.");
			return *this;
		}
		auto operator()(auto& Clip, auto Index, auto FrameContext) const {
			return HostedFunction(Clip, Index, FrameContext);
		}
	};

public:
	field(RequestFunction, RequestFunctionProxy{ DefaultRequestFunction });

public:
	Node() = default;
	Node(ExplicitlyConvertibleTo<HandleType> auto&& Descriptor) : NodeReference{ Forward(Descriptor) } {}

public:
	auto RequestFrameUnchecked(std::integral auto Index, auto FrameContext) const {
		VaporGlobals::API->requestFrameFilter(Index, Handle, FrameContext);
	}
	auto AccessFrameUnchecked(std::integral auto Index, auto FrameContext) const {
		return FrameReference{ VaporGlobals::API->getFrameFilter(Index, Handle, FrameContext) };
	}
	auto operator[](std::integral auto Index) const {
		auto ErrorMessageBuffer = std::array<char, 1024>{};
		auto FrameHandle = VaporGlobals::API->getFrame(Index, Handle, ErrorMessageBuffer.data(), 1024);
		if (FrameHandle == Frame::NullHandle)
			throw RuntimeError{ ErrorMessageBuffer.data() };
		return Frame{ FrameHandle };
	}
	auto ExpectFrame(std::integral auto Index) const {
		auto Expectation = new std::promise<Frame>{};
		auto Materialize = [](auto ExpectationPointer, auto ExpectedFrame, auto, auto, auto ErrorMessage) {
			auto Expectation = reinterpret_cast<std::promise<Frame>*>(ExpectationPointer);
			if (ErrorMessage == nullptr)
				Expectation->set_value(ExpectedFrame);
			else
				Expectation->set_exception(std::make_exception_ptr(RuntimeError{ ErrorMessage }));
			delete Expectation;
		};
		VaporGlobals::API->getFrameAsync(Index, Handle, Materialize, Expectation);
		return Expectation->get_future();
	}
	auto Type() const {
		//Placeholder for API v4.
	}
	auto QueryVideoInfo() const {
		auto [FormatHandle, FrameRateNumerator, FrameRateDenominator, Width, Height, FrameCount, _] = *VaporGlobals::API->getVideoInfo(Handle);
		return VideoInfo{
			.Format = FormatHandle == nullptr ? VaporGlobals::IndeterminateVideoFormat : VideoFormat::AdjustToStandardLayout(*FormatHandle),
			.FrameRateNumerator = FrameRateNumerator, .FrameRateDenominator = FrameRateDenominator,
			.Width = Width, .Height = Height, .FrameCount = FrameCount
		};
	}
	auto QueryAudioInfo() const {
		//Placeholder for API v4.
	}

public:
	template<SubtypeOf<Node> NodeType>
	operator NodeType() && {
		auto TargetNode = NodeType{ this->Leak() };
		TargetNode.RequestFunction = std::move(this->RequestFunction);
		return TargetNode;
	}
	template<SubtypeOf<Node> NodeType>
	operator NodeType() const & {
		auto TargetNode = NodeType{ this->CloneHandle() };
		TargetNode.RequestFunction = this->RequestFunction;
		return TargetNode;
	}
};

namespace PaddingFunctions::Node {
	auto Repeat = [](auto& Clip, auto Index, auto FrameContext) {
		Index = Utility::Min(Utility::Max(Index, 0), Clip.FrameCount - 1);
		return Clip.AccessFrameUnchecked(Index, FrameContext);
	};
	auto Reflect = [](auto& Clip, auto Index, auto FrameContext) {
		Index = Utility::PaddingFunctions::ReflectCoordinate(Index, Clip.FrameCount);
		return Clip.AccessFrameUnchecked(Index, FrameContext);
	};
	auto Default = Reflect;
}