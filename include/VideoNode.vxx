#pragma once
#include "VideoFrame.vxx"
#include "Node.vxx"

struct VideoNode : Node, AlternateRepresentations::Flattened::VideoInfo {
	VideoNode() = default;
	VideoNode(ExplicitlyConvertibleTo<HandleType> auto&& Handle) : Node{ Forward(Handle) } {
		auto& MetadataInSync = static_cast<VideoInfo&>(*this);
		auto ReferenceMetadata = this->QueryVideoInfo();
		MetadataInSync = reinterpret_cast<VideoInfo&>(ReferenceMetadata);
	}

public:
	auto RequestFrame(std::integral auto Index, auto FrameContext) const {
		if (Index >= 0 && Index < FrameCount)
			Node::RequestFrame(Index, FrameContext);
		else [[unlikely]]
			Node::RequestFrame(OutOfBoundsRemapping(Index, FrameCount), FrameContext);
	}
	auto RequestFrames(std::integral auto Index, auto FrameContext) const {
		for (auto x : FrameRequestor(Index))
			RequestFrame(x, FrameContext);
	}
	auto FetchFrame(std::integral auto Index, auto FrameContext) const {
		if (Index >= 0 && Index < FrameCount)
			return Node::FetchFrame(Index, FrameContext);
		else [[unlikely]]
			return Node::FetchFrame(OutOfBoundsRemapping(Index, FrameCount), FrameContext);
	}
	template<typename PixelType>
	auto FetchFrame(std::integral auto Index, auto FrameContext) const {
		return VideoFrame<PixelType>{ FetchFrame(Index, FrameContext) };
	}
	template<typename PixelType>
	auto FetchFrames(std::integral auto Index, auto FrameContext) const {
		auto FetchedFrames = std::unordered_map<std::ptrdiff_t, VideoFrame<PixelType>>{};
		auto RequestedIndexes = FrameRequestor(Index);
		FetchedFrames.rehash(RequestedIndexes.size());
		for (auto x : RequestedIndexes)
			FetchedFrames[x - Index] = FetchFrame<PixelType>(x, FrameContext);
		return FetchedFrames;
	}
	auto AcquireFrame(std::integral auto Index, auto FrameContext) const {
		if (Index >= 0 && Index < FrameCount)
			return Node::AcquireFrame(Index, FrameContext);
		else [[unlikely]]
			return Node::AcquireFrame(OutOfBoundsRemapping(Index, FrameCount), FrameContext);
	}
	template<typename PixelType>
	auto AcquireFrame(std::integral auto Index, auto FrameContext) const {
		return VideoFrame<PixelType>{ AcquireFrame(Index, FrameContext) };
	}
	template<typename PixelType>
	auto AcquireFrames(std::integral auto Index, auto FrameContext) const {
		if (FrameContext.GeneratorStatus == VSActivationReason::arAllFramesReady)
			return FetchFrames<PixelType>(Index, FrameContext);
		else if (FrameContext.GeneratorStatus == VSActivationReason::arInitial)
			RequestFrames(Index, FrameContext);
		throw FrameContextProxy::ResourceAcquisitionInProgress{};
	}

public:
	auto& ExtractMetadata() const {
		auto& Metadata = static_cast<const VideoInfo&>(*this);
		return reinterpret_cast<const ::VideoInfo&>(Metadata);
	}
	auto& ExtractFormat() const {
		return ExtractMetadata().Format;
	}
};