#pragma once
#include "VideoFrame.vxx"
#include "Node.vxx"

struct VideoNode : Node, AlternateRepresentations::Flattened::VideoInfo {
	field(PaddingFunction, PaddingFunctionProxy<VideoNode>{});

public:
	VideoNode() = default;
	VideoNode(ExplicitlyConvertibleTo<HandleType> auto&& Handle) : Node{ Forward(Handle) } {
		auto SynchronizeMetadata = [this] {
			auto& MetadataInSync = static_cast<VideoInfo&>(*this);
			auto ReferenceMetadata = this->QueryVideoInfo();
			MetadataInSync = reinterpret_cast<VideoInfo&>(ReferenceMetadata);
		};
		SynchronizeMetadata();
		this->PaddingFunction = PaddingFunctions::Node::Default;
	}

public:
	auto RequestFrame(std::integral auto Index, auto FrameContext) const {
		if (Index >= 0 && Index < FrameCount)
			RequestFrameUnchecked(Index, FrameContext);
	}
	auto RequestFrames(std::integral auto Index, auto FrameContext) const {
		for (auto x : RequestFunction(Index))
			RequestFrame(x, FrameContext);
	}

private:
	auto AccessFrame(auto Index, auto FrameContext) const {
		if (Index < 0 || Index >= FrameCount)
			return PaddingFunction(*this, Index, FrameContext);
		else
			return AccessFrameUnchecked(Index, FrameContext);
	}

public:
	template<typename PixelType, auto DirectAccess = false>
	auto FetchFrame(std::integral auto Index, auto FrameContext) const {
		return VideoFrame<PixelType, DirectAccess>{ AccessFrame(Index, FrameContext) };
	}
	template<typename PixelType, auto DirectAccess = false>
	auto FetchFrames(std::integral auto Index, auto FrameContext) const {
		using FrameType = VideoFrame<PixelType, DirectAccess>;
		auto FetchedFrames = std::unordered_map<std::ptrdiff_t, FrameType>{};
		auto RequestedIndexes = RequestFunction(Index);
		FetchedFrames.rehash(RequestedIndexes.size());
		for (auto x : RequestedIndexes)
			FetchedFrames[x - Index] = FetchFrame<PixelType, DirectAccess>(x, FrameContext);
		return FetchedFrames;
	}

public:
	auto& ExtractMetadata() const {
		auto& Metadata = static_cast<const VideoInfo&>(*this);
		return reinterpret_cast<const ::VideoInfo&>(Metadata);
	}
	auto& ExtractFormat() const {
		return ExtractMetadata().Format;
	}
	auto PeekFrame(std::integral auto Index, auto FrameContext) const {
		return Frame{ AccessFrame(Index, FrameContext) };
	}
};

namespace PaddingFunctions::VideoNode {
	auto Constant(auto&& Values, auto Core) {
		return [Values = Utility::TypeEraseIterableToTriplet(Forward(Values)), Core](auto& Clip, auto Index) {
			if (!Clip.WithConstantFormat() || !Clip.WithConstantDimensions())
				throw std::runtime_error{ "PaddingFunctions::VideoNode::Constant: only clips with constant format and dimensions supported." };
			auto AllocatedFrame = Core.AllocateVideoFrame(Clip.ExtractFormat(), Clip.Width, Clip.Height);
			auto FillWithColor = [&](auto&& BlankFrame) {
				using PixelType = std::decay_t<decltype(BlankFrame[0][0][0])>;
				for (auto c : Range{ BlankFrame.PlaneCount })
					for (auto y : Range{ BlankFrame[c].Height })
						for (auto x : Range{ BlankFrame[c].Width })
							BlankFrame[c][y][x] = static_cast<PixelType>(Values[c]);
				return BlankFrame.Transfer();
			};
			if (Clip.IsSinglePrecision())
				return FillWithColor(VideoFrame<float>{ AllocatedFrame.Leak() });
			else if (Clip.BitsPerSample > 8)
				return FillWithColor(VideoFrame<std::uint16_t>{ AllocatedFrame.Leak() });
			else
				return FillWithColor(VideoFrame<std::uint8_t>{ AllocatedFrame.Leak() });
		};
	}
	auto Zero(auto Core) {
		return [=](auto& Clip, auto Index) {
			if (Clip.IsRGB() || Clip.IsGray() || Clip.IsSinglePrecision())
				return Constant(0, Core)(Clip, Index);
			else
				return Constant(std::array{ 0, 1 << (Clip.BitsPerSample - 1) }, Core)(Clip, Index);
		};
	}
}