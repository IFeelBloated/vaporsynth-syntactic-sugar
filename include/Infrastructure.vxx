#pragma once
#include <iostream>
#include <string>
#include <string_view>
#include <vector>
#include <tuple>
#include <array>
#include <unordered_map>
#include <type_traits>
#include <functional>
#include <algorithm>
#include <concepts>
#include <utility>
#include <filesystem>
#include <future>
#include <mutex>
#include <memory>
#include <new>
#include <cstring>
#include <cstdint>
#include <cstddef>
#include <cmath>
#include <cstdlib>

#define field(FieldIdentifier, ...) std::decay_t<decltype(__VA_ARGS__)> FieldIdentifier = __VA_ARGS__
#define isinstance(Object, Type) (std::is_same_v<std::decay_t<decltype(Object)>, Type> || std::is_base_of_v<Type, std::decay_t<decltype(Object)>>)
#define Forward(...) std::forward<decltype(__VA_ARGS__)>(__VA_ARGS__)

#define Unpack(...) template UnpackIntoArray<__VA_ARGS__>()

using namespace std::literals;

constexpr auto operator""_size(unsigned long long Value) {
	return static_cast<std::size_t>(Value);
}

constexpr auto operator""_ptrdiff(unsigned long long Value) {
	return static_cast<std::ptrdiff_t>(Value);
}

constexpr auto operator""_u64(unsigned long long Value) {
	return static_cast<std::uint64_t>(Value);
}

constexpr auto operator""_i64(unsigned long long Value) {
	return static_cast<std::int64_t>(Value);
}

constexpr auto operator""_u32(unsigned long long Value) {
	return static_cast<std::uint32_t>(Value);
}

constexpr auto operator""_i32(unsigned long long Value) {
	return static_cast<std::int32_t>(Value);
}

auto ExposeCString(auto&& String) {
	if constexpr (isinstance(String, const char*) || isinstance(String, char*))
		return String;
	else
		return String.data();
}

constexpr auto IndeterminateSize = -1_ptrdiff;

consteval auto WithConstexprSize(auto&& Container) {
	using ContainerType = std::decay_t<decltype(Container)>;
	if constexpr (requires { std::array<char, ContainerType{}.size()>{}; })
		return true;
	else
		return false;
}