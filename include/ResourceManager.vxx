#pragma once
#include "Utility.vxx"
#include "UniversalContext.vxx"

namespace ResourceManager {
	template<typename ResourceType>
	struct Owner {
		field(Handle, static_cast<ResourceType*>(nullptr));

	protected:
		using HandleType = const ResourceType*;

	public:
		static constexpr auto NullHandle = static_cast<HandleType>(nullptr);

	public:
		Owner() = default;
		Owner(ExplicitlyConvertibleTo<HandleType> auto&& ResourceHandle) {
			this->Handle = Utility::PointerQualifiers::DropAll(static_cast<HandleType>(Forward(ResourceHandle)));
		}

	public:
		Owner(const Owner& OtherOwner) {
			*this = OtherOwner;
		}
		Owner(Owner&& OtherOwner) {
			*this = std::move(OtherOwner);
		}
		auto& operator=(const Owner& OtherOwner) {
			if (this != &OtherOwner) {
				this->ReleaseHandle();
				this->Handle = OtherOwner.CloneHandle();
			}
			return *this;
		}
		auto& operator=(Owner&& OtherOwner) {
			if (this != &OtherOwner)
				std::swap(this->Handle, OtherOwner.Handle);
			return *this;
		}

	public:
		~Owner() {
			this->ReleaseHandle();
		}

	public:
		auto IsEmpty() const {
			return Handle == NullHandle;
		}
		auto Leak() {
			auto TransferredHandle = Handle;
			Handle = nullptr;
			return TransferredHandle;
		}
		auto Observe() const {
			return Handle;
		}

	protected:
		auto CloneHandle() const {
			if constexpr (SubtypeOf<HandleType, const VSFrameRef*>)
				return Utility::PointerQualifiers::DropAll(UniversalContext::API->cloneFrameRef(Handle));
			if constexpr (SubtypeOf<HandleType, const VSNodeRef*>)
				return UniversalContext::API->cloneNodeRef(Handle);
			if constexpr (SubtypeOf<HandleType, const VSFuncRef*>)
				return UniversalContext::API->cloneFuncRef(Handle);
		}
		auto ReleaseHandle() {
			if constexpr (SubtypeOf<HandleType, const VSFrameRef*>)
				UniversalContext::API->freeFrame(Handle);
			if constexpr (SubtypeOf<HandleType, const VSNodeRef*>)
				UniversalContext::API->freeNode(Handle);
			if constexpr (SubtypeOf<HandleType, const VSFuncRef*>)
				UniversalContext::API->freeFunc(Handle);
		}
	};

	template<typename ResourceType, auto NonOwning = false>
	struct Tracker {
		field(Handle, static_cast<ResourceType*>(nullptr));

	private:
		using HandleType = const ResourceType*;

	public:
		Tracker() = default;
		Tracker(ExplicitlyConvertibleTo<HandleType> auto&& ResourceHandle) {
			this->Handle = Utility::PointerQualifiers::DropAll(static_cast<HandleType>(Forward(ResourceHandle)));
		}

	public:
		Tracker(const Tracker&) = delete;
		Tracker(Tracker&&) = delete;
		auto& operator=(const Tracker&) = delete;
		auto& operator=(Tracker&&) = delete;

	public:
		~Tracker() requires (NonOwning == false) {
			if (this->Handle != nullptr)
				this->ReleaseHandle();
		}
		~Tracker() = default;

	public:
		auto Leak() {
			auto TransferredHandle = Handle;
			Handle = nullptr;
			return TransferredHandle;
		}

	private:
		auto ReleaseHandle() {
			if constexpr (SubtypeOf<HandleType, const VSMap*>)
				UniversalContext::API->freeMap(Handle);
			if constexpr (SubtypeOf<HandleType, const VSCore*>)
				UniversalContext::API->freeCore(Handle);
		}
	};

	struct GarbageCollector {
		using RecyclerType = auto(*)(void*)->void;
		using GarbageRecord = std::tuple<RecyclerType, void*>;

	public:
		field(Registry, std::vector<GarbageRecord>{});

	public:
		GarbageCollector() = default;

	public:
		GarbageCollector(const GarbageCollector&) = delete;
		GarbageCollector(GarbageCollector&&) = delete;
		auto& operator=(const GarbageCollector&) = delete;
		auto& operator=(GarbageCollector&&) = delete;

	public:
		~GarbageCollector() {
			for (auto [Recycler, Garbage] : this->Registry)
				Recycler(Garbage);
		}

	public:
		auto ClaimOwnership(auto UnmanagedResourceHandle) {
			using ResourceType = std::decay_t<decltype(*UnmanagedResourceHandle)>;
			Registry.push_back({ [](auto ResourcePointer) { delete reinterpret_cast<ResourceType*>(ResourcePointer); }, UnmanagedResourceHandle });
		}
	};
}