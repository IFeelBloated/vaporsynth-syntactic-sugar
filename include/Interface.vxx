#pragma once
#include "Core.vxx"

namespace VaporInterface {
	template<typename FilterType>
	auto Initialize(auto, auto, auto InstanceData, auto Node, auto CoreHandle, auto...) {
		auto Data = reinterpret_cast<FilterType*>(*InstanceData);
		auto Core = CoreProxy{ .Handle = CoreHandle };
		if constexpr (auto Metadata = Data->RegisterMetadata(Core); Iterable<decltype(Metadata)>) {
			auto AggregatedMetadata = std::vector<VSVideoInfo>{};
			for (auto&& x : Metadata)
				AggregatedMetadata.push_back(x.ConvertToLegacyLayout(Core));
			VaporGlobals::API->setVideoInfo(AggregatedMetadata.data(), AggregatedMetadata.size(), Node);
		}
		else {
			auto CompatibleMetadata = Metadata.ConvertToLegacyLayout(Core);
			VaporGlobals::API->setVideoInfo(&CompatibleMetadata, 1, Node);
		}
	}

	template<typename FilterType>
	auto Delete(auto InstanceData, auto...) {
		auto Data = reinterpret_cast<FilterType*>(InstanceData);
		delete Data;
	}

	template<typename FilterType>
	[[gnu::flatten]] auto Evaluate(auto Index, auto ActivationReason, auto InstanceData, auto, auto FrameContext, auto Core, auto...) try {
		auto Data = reinterpret_cast<FilterType*>(*InstanceData);
		auto ContextHandle = FrameContextProxy{ .Handle = FrameContext };
		if (ActivationReason == VSActivationReason::arInitial)
			if constexpr (requires { Data->RequestReferenceFrames(0, FrameContext); })
				Data->RequestReferenceFrames(Index, ContextHandle);
			else
				return Data->DrawFrame(Index, CoreProxy{ .Handle = Core }, ContextHandle);
		else if (ActivationReason == VSActivationReason::arAllFramesReady)
			return Data->DrawFrame(Index, CoreProxy{ .Handle = Core }, ContextHandle);
		return Frame::NullHandle;
	}
	catch (RuntimeError& ErrorMessage) {
		auto Caption = FilterType::Name + ": "s;
		auto DecoratedMessage = Caption + ErrorMessage;
		VaporGlobals::API->setFilterError(DecoratedMessage.data(), FrameContext);
		return Frame::NullHandle;
	}

	template<typename FilterType>
	auto Create(auto InputMap, auto OutputMap, auto, auto Core, auto...) try {
		auto Data = [&] {
			if constexpr (requires { FilterType{ ArgumentList{} }; })
				return FilterType{ ArgumentList{ InputMap } };
			else
				return FilterType{ ArgumentList{ InputMap }, CoreProxy{ .Handle = Core } };
		}();
		auto Console = Controller<FilterType>{ OutputMap };
		auto SelfEvaluator = [&](auto EvaluatedMap, auto InstanceData) {
			auto AuxiliaryMap = VaporGlobals::API->createMap();
			auto AssumedMultithreadingMode = VSFilterMode::fmParallel;
			auto AssumedCacheFlag = 0;
			if constexpr (requires { &FilterType::MultithreadingMode; })
				AssumedMultithreadingMode = FilterType::MultithreadingMode;
			if constexpr (requires { &FilterType::CacheFlag; })
				AssumedCacheFlag = FilterType::CacheFlag;
			if constexpr (requires { Data.DrawFrame(0, CoreProxy{}, FrameContextProxy{}); })
				VaporGlobals::API->createFilter(AuxiliaryMap, EvaluatedMap, FilterType::Name, Initialize<FilterType>, Evaluate<FilterType>, Delete<FilterType>, AssumedMultithreadingMode, AssumedCacheFlag, InstanceData, Core);
			VaporGlobals::API->freeMap(AuxiliaryMap);
		};
		auto SelfInvoker = [&](auto&& ...Arguments) {
			auto InstanceData = static_cast<FilterType*>(nullptr);
			auto ArgumentMap = VaporGlobals::API->createMap();
			auto EvaluatedMap = VaporGlobals::API->createMap();
			auto MaterializeEvaluatedClips = [&]() {
				if constexpr (requires { InstanceData->RegisterMetadata(CoreProxy{}); }) {
					using VideoInfoType = decltype(InstanceData->RegisterMetadata(CoreProxy{}));
					auto VideoInfoPrototype = VideoInfoType{};
					if constexpr (WithConstexprSize(VideoInfoPrototype))
						return ExtractEvaluatedClips<true, VideoInfoPrototype.size()>(EvaluatedMap);
					else
						return ExtractEvaluatedClips<requires { VideoInfoPrototype.size(); }, IndeterminateSize>(EvaluatedMap);
				}
				else
					return ExtractEvaluatedClips<true, IndeterminateSize>(EvaluatedMap);
			};
			if constexpr (sizeof...(Arguments) != 0)
				Utility::Map::Fill(ArgumentMap, Forward(Arguments)...);
			try {
				if constexpr (requires { FilterType{ ArgumentList{} }; })
					InstanceData = new FilterType{ ArgumentList{ ArgumentMap } };
				else
					InstanceData = new FilterType{ ArgumentList{ ArgumentMap }, CoreProxy{ .Handle = Core } };
			}
			catch (...) {
				VaporGlobals::API->freeMap(EvaluatedMap);
				VaporGlobals::API->freeMap(ArgumentMap);
				throw;
			}
			SelfEvaluator(EvaluatedMap, InstanceData);
			auto EvaluatedClips = MaterializeEvaluatedClips();
			VaporGlobals::API->freeMap(EvaluatedMap);
			VaporGlobals::API->freeMap(ArgumentMap);
			return EvaluatedClips;
		};
		if constexpr (requires { Data.RegisterInvokingSequence(SelfInvoker, CoreProxy{}); })
			Console.Receive(Data.RegisterInvokingSequence(SelfInvoker, CoreProxy{ .Handle = Core }));
		else
			SelfEvaluator(OutputMap, new FilterType{ std::move(Data) });
	}
	catch (RuntimeError& ErrorMessage) {
		auto Console = Controller<FilterType>{ OutputMap };
		Console.RaiseError(ErrorMessage);
	}

	template<typename FilterType>
	auto RegisterFilter(auto Broker, auto Plugin) {
		Broker(FilterType::Name, FilterType::Signature, Create<FilterType>, nullptr, Plugin);
	}

	auto RegisterPlugin(auto Broker, auto Plugin) {
		VaporGlobals::API = getVapourSynthAPI(VAPOURSYNTH_API_VERSION);
		Broker(VaporGlobals::Identifier, VaporGlobals::Namespace, VaporGlobals::Description, VAPOURSYNTH_API_VERSION, 1, Plugin);
	}
}