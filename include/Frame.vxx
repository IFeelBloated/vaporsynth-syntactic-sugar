#pragma once
#include "ResourceManager.vxx"
#include "Metadata.vxx"

struct FrameReference : Owner<VSFrameRef> {
	using Owner::Owner;

public:
	template<SubtypeOf<FrameReference> FrameType>
	operator FrameType() && {
		return { this->Leak() };
	}
	template<SubtypeOf<FrameReference> FrameType>
	operator FrameType() const & {
		return { this->CloneHandle() };
	}
};

template<typename SampleType>
struct FramePrototype : FrameReference {
	field(PropertyMap, static_cast<VSMap*>(nullptr));

public:
	static constexpr auto Readonly = std::is_const_v<SampleType>;

public:
	FramePrototype() = default;
	FramePrototype(ExplicitlyConvertibleTo<HandleType> auto&& Descriptor) : FrameReference{ Forward(Descriptor) } {
		if constexpr (Readonly)
			this->PropertyMap = Utility::PointerDropQualifiers(VaporGlobals::API->getFramePropsRO(this->Handle));
		else
			this->PropertyMap = VaporGlobals::API->getFramePropsRW(this->Handle);
	}

public:
	auto Type() const {
		//Placeholder for API v4.
	}
	auto& QueryVideoFormat() const {
		auto FormatHandle = VaporGlobals::API->getFrameFormat(Handle);
		return VideoFormat::AdjustToStandardLayout(*FormatHandle);
	}
	auto QueryAudioFormat() const {
		//Placeholder for API v4.
	}
	auto Transfer() {
		return FrameReference{ Leak() };
	}
	auto ListProperties() const {
		return Utility::Map::ListKeys(PropertyMap);
	}
	auto operator[](ExplicitlyConvertibleTo<std::string> auto&& Property) const {
		return Utility::Map::AccessItem<Readonly>(PropertyMap, Forward(Property));
	}
	auto AbsorbPropertiesFrom(SubtypeOf<FrameReference> auto&& Source) const {
		for (auto& Self = *this; auto x : Source.ListProperties())
			Self[x] = Source[x];
	}
};

using Frame = FramePrototype<const void>;
using WritableFrame = FramePrototype<void>;

struct FrameContextProxy {
	field(Handle, static_cast<VSFrameContext*>(nullptr));

public:
	auto QueryOutputIndex() const {
		return VaporGlobals::API->getOutputIndex(Handle);
	}
	operator auto() const {
		return Handle;
	}
};