#pragma once
#include "ResourceManager.vxx"
#include "Descriptors.vxx"

struct FrameReference : ResourceManager::Owner<VSFrameRef> {
	using Owner::Owner;

public:
	template<SubtypeOf<FrameReference> FrameType>
	operator FrameType() && {
		return { this->Leak() };
	}
	template<SubtypeOf<FrameReference> FrameType>
	operator FrameType() const & {
		return { this->CloneHandle() };
	}
};

template<typename SampleType>
struct FramePrototype : FrameReference {
	field(PropertyMap, static_cast<VSMap*>(nullptr));

public:
	static constexpr auto Readonly = std::is_const_v<SampleType>;

public:
	FramePrototype() = default;
	FramePrototype(ExplicitlyConvertibleTo<HandleType> auto&& Handle) : FrameReference{ Forward(Handle) } {
		if constexpr (Readonly)
			this->PropertyMap = Utility::PointerQualifiers::DropAll(UniversalContext::API->getFramePropsRO(this->Handle));
		else
			this->PropertyMap = UniversalContext::API->getFramePropsRW(this->Handle);
	}

public:
	auto QueryMediaType() const {
		//Placeholder for API v4.
	}
	auto& QueryVideoFormat() const {
		auto FormatHandle = UniversalContext::API->getFrameFormat(Handle);
		return VideoFormat::AdjustToStandardLayout(*FormatHandle);
	}
	auto QueryAudioFormat() const {
		//Placeholder for API v4.
	}
	auto Transfer() {
		return FrameReference{ Leak() };
	}
	auto ListProperties() const {
		return Utility::Map::ListKeys(PropertyMap);
	}
	auto operator[](ExplicitlyConvertibleTo<std::string> auto&& Property) const {
		return Utility::Map::Item<Readonly>{ PropertyMap, Forward(Property) };
	}
	auto AbsorbPropertiesFrom(SubtypeOf<FrameReference> auto&& Source) const requires (Readonly == false) {
		for (auto& Self = *this; auto x : Source.ListProperties())
			Self[x] = Source[x];
	}

public:
	explicit operator auto() const {
		//Placeholder for API v4.
		auto StringRepresentation = std::ostringstream{};
		StringRepresentation << "Media Type: Video\n";
		StringRepresentation << "Format: " << static_cast<std::string>(QueryVideoFormat()) << "\n";
		StringRepresentation << "Resolution: " << UniversalContext::API->getFrameWidth(Handle, 0) << " × " << UniversalContext::API->getFrameHeight(Handle, 0) << "\n---- Properties ----";
		for (auto&& x : ListProperties())
			StringRepresentation << "\n" << x << ": " << Utility::Map::PrintItem(operator[](x));
		return StringRepresentation.str();
	}
};

using Frame = FramePrototype<const void>;
using WritableFrame = FramePrototype<void>;

struct FrameContextProxy {
	field(Handle, static_cast<VSFrameContext*>(nullptr));

public:
	auto QueryOutputIndex() const {
		return UniversalContext::API->getOutputIndex(Handle);
	}
	auto RaiseError(ExplicitlyConvertibleTo<std::string> auto&& FormattedErrorMessage) const {
		auto ErrorMessage = Utility::ExposeCharPointerIfASCIZCompatibleOrDeepCopyIfNot(FormattedErrorMessage);
		UniversalContext::API->setFilterError(Utility::ExtractCharPointerFromASCIZFormattedString(ErrorMessage), Handle);
		return Frame::NullHandle;
	}
	operator auto() const {
		return Handle;
	}
};