#pragma once
#include "Frame.vxx"
#include "Plane.vxx"

template<typename PixelType, auto DirectAccess = false>
struct VideoFrame : FramePrototype<PixelType>, VideoFormat {
private:
	using PlaneType = Plane<PixelType, DirectAccess>;
	using typename FrameReference::HandleType;

public:
	using FramePrototype<PixelType>::Readonly;

public:
	field(Planes, std::array{ PlaneType{}, PlaneType{}, PlaneType{} });

public:
	VideoFrame() = default;
	VideoFrame(ExplicitlyConvertibleTo<HandleType> auto&& Descriptor) : FramePrototype<PixelType>{ Forward(Descriptor) } {
		auto ConstructPlane = [this](auto Index) {
			auto Width = static_cast<std::size_t>(VaporGlobals::API->getFrameWidth(this->Handle, Index));
			auto Height = static_cast<std::size_t>(VaporGlobals::API->getFrameHeight(this->Handle, Index));
			auto Stride = static_cast<std::ptrdiff_t>(VaporGlobals::API->getStride(this->Handle, Index) / sizeof(PixelType));
			auto Canvas = [&] {
				if constexpr (Readonly)
					return reinterpret_cast<PixelType*>(VaporGlobals::API->getReadPtr(this->Handle, Index));
				else
					return reinterpret_cast<PixelType*>(VaporGlobals::API->getWritePtr(this->Handle, Index));
			}();
			if constexpr (PlaneType::EnabledAutomaticPadding)
				return PlaneType{ Width, Height, Stride, Canvas, PaddingFunctions::Plane::Default };
			else
				return PlaneType{ Width, Height, Stride, Canvas };
		};
		auto SynchronizeFormat = [this] {
			auto& FormatInSync = static_cast<VideoFormat&>(*this);
			auto& ReferenceFormat = this->QueryVideoFormat();
			FormatInSync = ReferenceFormat;
		};
		SynchronizeFormat();
		for (auto Index : Range{ this->PlaneCount })
			Planes[Index] = ConstructPlane(Index);
	}

public:
	auto& operator[](IntegralOrEnumerable auto x) const {
		return Planes[static_cast<std::size_t>(x)];
	}
	auto& ExtractFormat() const {
		return static_cast<const VideoFormat&>(*this);
	}
	using FramePrototype<PixelType>::operator[];
};