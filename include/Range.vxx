#pragma once
#include "Infrastructure.vxx"

struct Range {
	field(Startpoint, 0z);
	field(Endpoint, 0z);
	field(Step, 1z);

private:
	struct Iterator {
		field(Cursor, 0z);
		field(Step, 0z);

	public:
		constexpr auto operator*() const {
			return Cursor;
		}
		constexpr auto& operator++() {
			Cursor += Step;
			return *this;
		}
		constexpr auto operator!=(auto&& OtherIterator) const {
			if (Step > 0)
				return Cursor < OtherIterator.Cursor;
			else
				return Cursor > OtherIterator.Cursor;
		}
	};

public:
	constexpr Range() = default;
	constexpr Range(std::integral auto Endpoint) {
		if (Endpoint < 0)
			this->Step = -1;
		this->Endpoint = Endpoint;
	}
	constexpr Range(std::integral auto Startpoint, std::integral auto Endpoint) {
		if (Startpoint > Endpoint)
			this->Step = -1;
		this->Startpoint = Startpoint;
		this->Endpoint = Endpoint;
	}
	constexpr Range(std::integral auto Startpoint, std::integral auto Endpoint, std::integral auto Step) {
		this->Startpoint = Startpoint;
		this->Endpoint = Endpoint;
		this->Step = Step;
	}

public:
	constexpr auto begin() const {
		return Iterator{ .Cursor = Startpoint, .Step = Step };
	}
	constexpr auto end() const {
		return Iterator{ .Cursor = Endpoint, .Step = Step };
	}
};