#pragma once
#include "Core.vxx"

namespace PluginInstantiator::Private {
	auto Configurator = static_cast<VSConfigPlugin>(nullptr);
	auto Handle = static_cast<VSPlugin*>(nullptr);
	auto Recycler = ResourceManager::GarbageCollector{};
}

namespace PluginInstantiator {
	template<typename FilterType>
	auto RegisterFilter(auto&& ...Configurations) requires (sizeof...(Configurations) < 2) {
		auto ConfigurationHandle = new std::tuple{ ""s, Forward(Configurations)... };
		using ConfigurationType = std::decay_t<decltype(*ConfigurationHandle)>;
		auto Signature = [&] {
			auto CarryOnRegardless = [&](auto...) {
				if constexpr (requires { FilterType::SpecifySignature(); })
					if constexpr (requires { { FilterType::SpecifySignature() }->ExplicitlyConvertibleTo<std::string>; })
						return FilterType::SpecifySignature();
					else
						static_assert(sizeof(FilterType) == -1, "RegisterFilter: SpecifySignature() has an unrecognized return type.");
				else if constexpr (requires { FilterType::Signature; })
					if constexpr (requires { { FilterType::Signature }->ExplicitlyConvertibleTo<std::string>; })
						return FilterType::Signature;
					else
						static_assert(sizeof(FilterType) == -1, "RegisterFilter: Signature is of an unrecognized type.");
				else
					static_assert(sizeof(FilterType) == -1, "RegisterFilter: registration failed because the signature of the filter cannot be determined.");
			};
			if constexpr (sizeof...(Configurations) > 0)
				if constexpr (requires { FilterType::SpecifySignature(std::get<1>(*ConfigurationHandle)); })
					if constexpr (requires { { FilterType::SpecifySignature(std::get<1>(*ConfigurationHandle)) }->ExplicitlyConvertibleTo<std::string>; })
						return FilterType::SpecifySignature(std::get<1>(*ConfigurationHandle));
					else
						static_assert(sizeof(FilterType) == -1, "RegisterFilter: SpecifySignature() returned something of an unrecognized type given the current configurations.");
				else
					return CarryOnRegardless();
			else
				return CarryOnRegardless();
		}();
		auto FilterEngine = [](auto ArgumentMap, auto ConsoleHandle, auto ConfigurationPointer, auto CoreHandle, auto...) {
			using ExtendedFilterType = std::pair<const char*, FilterType>;
			auto Arguments = ArgumentList{ .Handle = ArgumentMap };
			auto Console = ConsoleProxy{ .Handle = ConsoleHandle };
			auto Core = CoreProxy{ .Handle = CoreHandle };
			auto ConfigurationHandle = reinterpret_cast<ConfigurationType*>(ConfigurationPointer);
			static auto InitiateMetadataSpecifier = [](auto ...SpecifierDependencies) {
				auto [FilterHandle, Core] = [&] {
					if constexpr (sizeof...(SpecifierDependencies) > 1)
						return std::tuple{ SpecifierDependencies... };
					else if constexpr (sizeof...(SpecifierDependencies) > 0)
						return std::tuple{ SpecifierDependencies..., CoreProxy{} };
					else
						return std::tuple{ static_cast<FilterType*>(nullptr), CoreProxy{} };
				}();
				if constexpr (requires { { FilterHandle->SpecifyMetadata() }->AnyBut<void>; })
					return FilterHandle->SpecifyMetadata();
				else if constexpr (requires { { FilterHandle->SpecifyMetadata(Core) }->AnyBut<void>; })
					return FilterHandle->SpecifyMetadata(Core);
				else
					static_assert(sizeof(FilterType) == -1, "FilterEngine: SpecifyMetadata() is either missing or has an incompatible signature.");
			};
			static auto OrchestrateMediaTypeDependentActions = [](auto FilterHandle, auto&& ActionForListOfVideoNodes, auto&& ActionForListOfAudioNodes, auto&& ActionForVideoNode, auto&& ActionForAudioNode) {
				if constexpr (requires { { InitiateMetadataSpecifier() }->Iterable; })
					if constexpr (requires { { *InitiateMetadataSpecifier().begin() }->AnyOf<VideoInfo, VSVideoInfo>; })
						return ActionForListOfVideoNodes(FilterHandle);
					else if constexpr (requires { { *InitiateMetadataSpecifier().begin() }->AnyOf<AudioInfo>; })
						return ActionForListOfAudioNodes(FilterHandle);
					else
						static_assert(sizeof(FilterType) == -1, "FilterEngine: failed to decide which action to take because the filter has a list of outputs whose media type cannot be determined.");
				else if constexpr (requires { { InitiateMetadataSpecifier() }->AnyOf<VideoInfo, VSVideoInfo>; })
					return ActionForVideoNode(FilterHandle);
				else if constexpr (requires { { InitiateMetadataSpecifier() }->AnyOf<AudioInfo>; })
					return ActionForAudioNode(FilterHandle);
				else
					static_assert(sizeof(FilterType) == -1, "FilterEngine: failed to decide which action to take because the media type of the filter's output cannot be determined.");
			};
			auto InitiateFilterInstance = [=](auto ExtendedFilterInstance, auto ResultMap) {
				auto& [FilterName, FilterInstance] = *ExtendedFilterInstance;
				auto AuxiliaryMap = Utility::Map::Create();
				auto ExecutionPolicyForFrameGenerator = [&] {
					if constexpr (requires { FilterInstance.SpecifyExecutionPolicyForFrameGenerator(); })
						if constexpr (requires { { FilterInstance.SpecifyExecutionPolicyForFrameGenerator() }->AnyOf<ExecutionSchemes, VSFilterMode>; })
							return static_cast<int>(FilterInstance.SpecifyExecutionPolicyForFrameGenerator());
						else
							static_assert(sizeof(FilterType) == -1, "FilterEngine: SpecifyExecutionPolicyForFrameGenerator() has an unrecognized return type.");
					else if constexpr (requires { FilterType::ExecutionPolicyForFrameGenerator; })
						if constexpr (requires { { FilterType::ExecutionPolicyForFrameGenerator }->AnyOf<ExecutionSchemes, VSFilterMode>; })
							return static_cast<int>(FilterType::ExecutionPolicyForFrameGenerator);
						else
							static_assert(sizeof(FilterType) == -1, "FilterEngine: ExecutionPolicyForFrameGenerator is of an unrecognized type.");
					else
						return VSFilterMode::fmParallel;
				}();
				auto CachePolicy = [&] {
					if constexpr (requires { FilterInstance.SpecifyCachePolicy(); })
						if constexpr (requires { { FilterInstance.SpecifyCachePolicy() }->AnyOf<CacheOptions, VSNodeFlags>; })
							return static_cast<int>(FilterInstance.SpecifyCachePolicy());
						else
							static_assert(sizeof(FilterType) == -1, "FilterEngine: SpecifyCachePolicy() has an unrecognized return type.");
					else if constexpr (requires { FilterType::CachePolicy; })
						if constexpr (requires { { FilterType::CachePolicy }->AnyOf<CacheOptions, VSNodeFlags>; })
							return static_cast<int>(FilterType::CachePolicy);
						else
							static_assert(sizeof(FilterType) == -1, "FilterEngine: CachePolicy is of an unrecognized type.");
					else
						return static_cast<int>(CacheOptions::Automatic);
				}();
				auto FilterRecycler = [](auto FatInstancePointer, auto...) {
					auto Garbage = reinterpret_cast<ExtendedFilterType*>(FatInstancePointer);
					delete Garbage;
				};
				auto NodeInitializer = [](auto, auto ConsoleHandle, auto FatInstancePointer, auto NodeHandle, auto CoreHandle, auto...) {
					auto Core = CoreProxy{ .Handle = CoreHandle };
					try {
						OrchestrateMediaTypeDependentActions(&std::get<1>(*reinterpret_cast<ExtendedFilterType*>(*FatInstancePointer)),
							[&](auto FilterHandle) {
								auto SyncretizedMetadata = std::vector<VSVideoInfo>{};
								for (auto&& x : InitiateMetadataSpecifier(FilterHandle, Core))
									SyncretizedMetadata.push_back(VideoInfo::AdjustToLegacyLayout(x, Core));
								UniversalContext::API->setVideoInfo(SyncretizedMetadata.data(), SyncretizedMetadata.size(), NodeHandle);
							},
							[](auto) { /* Placeholder for API v4. */ },
							[&](auto FilterHandle) {
								auto Metadata = InitiateMetadataSpecifier(FilterHandle, Core);
								auto&& SyncretizedMetadata = VideoInfo::AdjustToLegacyLayout(Metadata, Core);
								UniversalContext::API->setVideoInfo(&SyncretizedMetadata, 1, NodeHandle);
							},
							[](auto) { /* Placeholder for API v4. */ }
						);
					}
					catch (std::exception& ErrorMessage) {
						auto Console = ConsoleProxy{ .Handle = ConsoleHandle };
						delete reinterpret_cast<ExtendedFilterType*>(*FatInstancePointer);
						Console.RaiseError(ErrorMessage.what());
					}
				};
				auto FrameGenerator = [](auto Index, auto ActivationReason, auto FatInstancePointer, auto AttachmentPointer, auto FrameContextHandle, auto CoreHandle, auto...) {
					auto& [FilterName, FilterInstance] = *reinterpret_cast<ExtendedFilterType*>(*FatInstancePointer);
					auto FrameContext = FrameContextProxy{ .Handle = FrameContextHandle };
					auto InitiateGeneratorRoutine = [&](auto ...GeneratorDependencies) {
						if constexpr (auto Core = CoreProxy{ .Handle = CoreHandle }; sizeof...(GeneratorDependencies) > 0)
							if constexpr (auto [AttachmentHandle] = std::tuple{ GeneratorDependencies... }; requires { { FilterInstance.GenerateFrame(Index, FrameContext, *AttachmentHandle, Core) }->SubtypeOf<FrameReference>; })
								return FilterInstance.GenerateFrame(Index, FrameContext, *AttachmentHandle, Core);
							else
								static_assert(sizeof(FilterType) == -1, "FilterEngine: the signature of the frame generator must be \"auto GenerateFrame(auto Index, auto FrameContext, auto& Attachments, auto Core)\" when there're attachments available.");
						else
							if constexpr (requires { { FilterInstance.GenerateFrame(Index, FrameContext, Core) }->SubtypeOf<FrameReference>; })
								return FilterInstance.GenerateFrame(Index, FrameContext, Core);
							else if constexpr (requires { { FilterInstance.GenerateFrame(Index, Core) }->SubtypeOf<FrameReference>; })
								return FilterInstance.GenerateFrame(Index, Core);
							else if constexpr (requires { { FilterInstance.GenerateFrame(Core) }->SubtypeOf<FrameReference>; })
								return FilterInstance.GenerateFrame(Core);
							else
								static_assert(sizeof(FilterType) == -1, "FilterEngine: GenerateFrame() is either missing or has an incompatible signature.");
					};
					auto InitiateFrameGeneratorForSourceFilter = [&] {
						if (ActivationReason == VSActivationReason::arInitial)
							return Utility::PointerQualifiers::AddConst(InitiateGeneratorRoutine().Leak());
						return Frame::NullHandle;
					};
					auto InitiateFrameGeneratorForStandardFilter = [&](auto& FilterInstance) {
						using AttachmentType = decltype(FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext));
						if (auto& AttachmentHandle = reinterpret_cast<AttachmentType*&>(*AttachmentPointer); ActivationReason == VSActivationReason::arInitial)
							if constexpr (requires { { AttachmentHandle }->AnyBut<void*>; })
								AttachmentHandle = new auto{ FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext) };
							else
								FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext);
						else if (ActivationReason == VSActivationReason::arAllFramesReady)
							if constexpr (requires { { AttachmentHandle }->AnyBut<void*>; }) {
								[[maybe_unused]] auto AttachmentGuard = std::unique_ptr<AttachmentType>{ AttachmentHandle };
								return Utility::PointerQualifiers::AddConst(InitiateGeneratorRoutine(AttachmentHandle).Leak());
							}
							else
								return Utility::PointerQualifiers::AddConst(InitiateGeneratorRoutine().Leak());
						else if (ActivationReason == VSActivationReason::arError) [[unlikely]]
							if constexpr (requires { { AttachmentHandle }->AnyBut<void*>; })
								delete AttachmentHandle;
						return Frame::NullHandle;
					};
					auto InitiateFrameGeneratorForFilterRequiringLatentResourceAcquisition = [&](auto& FilterInstance) {
						using PrimordialAttachmentType = decltype(FilterInstance.AcquireLatentResources(Index, FrameContext));
						using AttachmentType = decltype(FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext));
						static_assert(SubtypeOf<PrimordialAttachmentType, void>, "FilterEngine: sending primordial attachments to AcquireResourcesForFrameGenerator() is not currently supported, open an issue if you have a valid use case that requires this functionality.");
						if (ActivationReason == VSActivationReason::arInitial)
							FilterInstance.AcquireLatentResources(Index, FrameContext);
						else if (auto& AttachmentHandle = reinterpret_cast<AttachmentType*&>(*AttachmentPointer); ActivationReason == VSActivationReason::arAllFramesReady && AttachmentHandle == nullptr)
							if constexpr (requires { { AttachmentHandle }->AnyBut<void*>; })
								AttachmentHandle = new auto{ FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext) };
							else
								FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext);
						else if (ActivationReason == VSActivationReason::arAllFramesReady)
							if constexpr (requires { { AttachmentHandle }->AnyBut<void*>; }) {
								[[maybe_unused]] auto AttachmentGuard = std::unique_ptr<AttachmentType>{ AttachmentHandle };
								return Utility::PointerQualifiers::AddConst(InitiateGeneratorRoutine(AttachmentHandle).Leak());
							}
							else
								return Utility::PointerQualifiers::AddConst(InitiateGeneratorRoutine().Leak());
						else if (ActivationReason == VSActivationReason::arError) [[unlikely]]
							if constexpr (requires { { AttachmentHandle }->AnyBut<void*>; })
								delete AttachmentHandle;
						return Frame::NullHandle;
					};
					try {
						if constexpr (requires { FilterInstance.AcquireResourcesForFrameGenerator(Index, FrameContext); })
							if constexpr (requires { FilterInstance.AcquireLatentResources(Index, FrameContext); })
								return InitiateFrameGeneratorForFilterRequiringLatentResourceAcquisition(FilterInstance);
							else
								return InitiateFrameGeneratorForStandardFilter(FilterInstance);
						else
							return InitiateFrameGeneratorForSourceFilter();
					}
					catch (std::exception& ErrorMessage) {
						return FrameContext.RaiseError(FilterName + ": "s + ErrorMessage.what());
					}
				};
				OrchestrateMediaTypeDependentActions(ExtendedFilterInstance.release(),
					[&](auto FatInstanceHandle) { UniversalContext::API->createFilter(AuxiliaryMap.Handle, ResultMap, FilterName, NodeInitializer, FrameGenerator, FilterRecycler, ExecutionPolicyForFrameGenerator, CachePolicy, FatInstanceHandle, CoreHandle); },
					[](auto) { /* Placeholder for API v4. */ },
					[&](auto FatInstanceHandle) { UniversalContext::API->createFilter(AuxiliaryMap.Handle, ResultMap, FilterName, NodeInitializer, FrameGenerator, FilterRecycler, ExecutionPolicyForFrameGenerator, CachePolicy, FatInstanceHandle, CoreHandle); },
					[](auto) { /* Placeholder for API v4. */ }
				);
			};
			auto FilterInstantiator = [=](auto Arguments) {
				auto CarryOnRegardless = [&](auto...) {
					if constexpr (requires { FilterType{ Arguments, Core }; })
						return std::make_unique<ExtendedFilterType>(std::piecewise_construct, std::tuple{ std::get<0>(*ConfigurationHandle).data() }, std::tuple{ Arguments, Core });
					else if constexpr (requires { FilterType{ Arguments }; })
						return std::make_unique<ExtendedFilterType>(std::piecewise_construct, std::tuple{ std::get<0>(*ConfigurationHandle).data() }, std::tuple{ Arguments });
					else if constexpr (requires { FilterType{}; })
						return std::make_unique<ExtendedFilterType>(std::piecewise_construct, std::tuple{ std::get<0>(*ConfigurationHandle).data() }, std::tuple{});
					else
						static_assert(sizeof(FilterType) == -1, "FilterEngine: failed to instantiate a filter because its constructor has an incompatible signature.");
				};
				if constexpr (sizeof...(Configurations) > 0)
					if constexpr (requires { FilterType{ Arguments, std::get<1>(*ConfigurationHandle), Core }; })
						return std::make_unique<ExtendedFilterType>(std::piecewise_construct, std::tuple{ std::get<0>(*ConfigurationHandle).data() }, std::forward_as_tuple(std::move(Arguments), std::get<1>(*ConfigurationHandle), std::move(Core)));
					else
						return CarryOnRegardless();
				else
					return CarryOnRegardless();
			};
			auto ImpredicativeFilterInitiator = [=](auto&& ...Arguments) {
				auto ArgumentMap = Utility::Map::Create();
				auto ResultMap = Utility::Map::Create();
				auto ResultItem = Utility::Map::Item{ ResultMap.Handle, "clip" };
				if constexpr (sizeof...(Arguments) != 0)
					Utility::Map::Fill(ArgumentMap.Handle, Forward(Arguments)...);
				InitiateFilterInstance(FilterInstantiator(ArgumentList{ .Handle = ArgumentMap.Handle }), ResultMap.Handle);
				if (auto [EvaluationFailed, ErrorMessage] = Utility::Map::CheckForError(ResultMap.Handle); EvaluationFailed)
					throw std::runtime_error{ ErrorMessage };
				return OrchestrateMediaTypeDependentActions(static_cast<FilterType*>(nullptr),
					[&](auto FilterHandle) {
						using MetadataContainerType = decltype(InitiateMetadataSpecifier(FilterHandle));
						using VideoNodeContainerType = Utility::Reflection::ContainerReplaceElementType<MetadataContainerType, VideoNode>;
						return static_cast<VideoNodeContainerType>(ResultItem);
					},
					[](auto) { /* Placeholder for API v4. */ },
					[&](auto) { return static_cast<VideoNode>(ResultItem); },
					[](auto) { /* Placeholder for API v4. */ }
				);
			};
			try {
				if constexpr (requires { { FilterType::InitiateWorkflow(ImpredicativeFilterInitiator, Arguments, Core) }->AnyBut<void>; })
					Console.Receive("clip", FilterType::InitiateWorkflow(ImpredicativeFilterInitiator, Arguments, Core));
				else if constexpr (requires { { FilterType::InitiateWorkflow(ImpredicativeFilterInitiator, Arguments) }->AnyBut<void>; })
					Console.Receive("clip", FilterType::InitiateWorkflow(ImpredicativeFilterInitiator, Arguments));
				else if constexpr (requires { { FilterType::InitiateWorkflow(ImpredicativeFilterInitiator) }->AnyBut<void>; })
					Console.Receive("clip", FilterType::InitiateWorkflow(ImpredicativeFilterInitiator));
				else
					InitiateFilterInstance(FilterInstantiator(Arguments), ConsoleHandle);
				if (auto [EvaluationFailed, ErrorMessage] = Utility::Map::CheckForError(ConsoleHandle); EvaluationFailed)
					throw std::runtime_error{ ErrorMessage };
			}
			catch (std::exception& ErrorMessage) {
				Console.RaiseError(std::get<0>(*ConfigurationHandle) + ": " + ErrorMessage.what());
			}
		};
		std::get<0>(*ConfigurationHandle) = Utility::SignatureParser::DeduceFunctionName(Signature, Utility::Reflection::ReifyTypeNameIntoString<FilterType>());
		Private::Recycler.ClaimOwnership(ConfigurationHandle);
		UniversalContext::API->registerFunction(std::get<0>(*ConfigurationHandle).data(), Utility::SignatureParser::ExtractParameterList(Signature).data(), FilterEngine, ConfigurationHandle, Private::Handle);
	}
	auto RegisterFunction(ExplicitlyConvertibleTo<std::string> auto&& Signature, auto&& FunctionEntity) {
		auto ConfigurationHandle = new std::tuple{ ""s, ""s, Forward(FunctionEntity) };
		using ConfigurationType = std::decay_t<decltype(*ConfigurationHandle)>;
		auto FunctionProxy = [](auto ArgumentMap, auto ConsoleHandle, auto ConfigurationPointer, auto CoreHandle, auto...) {
			auto Arguments = ArgumentList{ .Handle = ArgumentMap };
			auto Console = ConsoleProxy{ .Handle = ConsoleHandle };
			auto& [FunctionName, ReturnKey, RegisteredFunction] = *reinterpret_cast<ConfigurationType*>(ConfigurationPointer);
			auto FunctionInvoker = [&] {
				if constexpr (auto Core = CoreProxy{ .Handle = CoreHandle }; requires { RegisteredFunction(Arguments, Core); })
					return RegisteredFunction(Arguments, Core);
				else if constexpr (requires { RegisteredFunction(Arguments); })
					return RegisteredFunction(Arguments);
				else if constexpr (requires { RegisteredFunction(); })
					return RegisteredFunction();
				else
					static_assert(sizeof(RegisteredFunction) == -1, "RegisterFunction: failed to register the specified object, it is either not callable or has an incompatible signature.");
			};
			try {
				if constexpr (requires { { FunctionInvoker() }->AnyBut<void>; })
					Console.Receive(ReturnKey, FunctionInvoker());
				else
					FunctionInvoker();
			}
			catch (std::exception& ErrorMessage) {
				Console.RaiseError(FunctionName + ": " + ErrorMessage.what());
			}
		};
		std::get<0>(*ConfigurationHandle) = Utility::SignatureParser::DeduceFunctionName(Signature);
		std::get<1>(*ConfigurationHandle) = Utility::SignatureParser::DeduceReturnKey(Signature, "val");
		Private::Recycler.ClaimOwnership(ConfigurationHandle);
		UniversalContext::API->registerFunction(std::get<0>(*ConfigurationHandle).data(), Utility::SignatureParser::ExtractParameterList(Signature).data(), FunctionProxy, ConfigurationHandle, Private::Handle);
	}
	auto SpecifyConfigurations(SubtypeOf<PluginInfo> auto&& Descriptor, AnyOf<WriteProtectOptions, bool> auto WriteProtection) {
		Private::Configurator(Descriptor.Identifier.data(), Descriptor.Namespace.data(), Descriptor.Description.data(), VAPOURSYNTH_API_VERSION, static_cast<bool>(WriteProtection), Private::Handle);
	}
	auto SpecifyConfigurations(SubtypeOf<PluginInfo> auto&& Descriptor) {
		SpecifyConfigurations(Forward(Descriptor), WriteProtectOptions::WriteOnce);
	}
}

#define InstantiatePluginFrom(...) VS_EXTERNAL_API(auto) VapourSynthPluginInit(VSConfigPlugin configFunc, VSRegisterFunction, VSPlugin* plugin) { \
	PluginInstantiator::Private::Configurator = configFunc; \
	PluginInstantiator::Private::Handle = plugin; \
	UniversalContext::API = getVapourSynthAPI(VAPOURSYNTH_API_VERSION); \
	__VA_ARGS__(); \
}
