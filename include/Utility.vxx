#pragma once
#include "Range.vxx"

using RuntimeError = std::string;

template<typename UnknownType, typename ReferenceType>
concept ExplicitlyConvertibleTo = requires(UnknownType x) { static_cast<ReferenceType>(Forward(x)); };

template<typename UnknownType, typename ReferenceType>
concept ConstructibleFrom = ExplicitlyConvertibleTo<ReferenceType, std::decay_t<UnknownType>>;

template<typename UnknownType>
concept NativeArray = std::is_array_v<std::remove_cvref_t<UnknownType>>;

template<typename UnknownType>
concept Advanceable = requires(UnknownType x) { ++x; };

template<typename UnknownType>
concept Iterable = NativeArray<UnknownType> || requires(UnknownType x) {
	{ x.begin() }->Advanceable;
	*x.begin();
	x.begin() != x.end();
};

template<typename UnknownType>
concept IntegralOrEnumerable = std::integral<UnknownType> || std::is_enum_v<UnknownType>;

template<typename UnknownType, typename ReferenceType>
concept SubtypeOf = std::same_as<std::decay_t<UnknownType>, ReferenceType> || std::derived_from<std::decay_t<UnknownType>, ReferenceType>;

template<typename UnknownType, typename ...ReferenceTypes>
concept AnyOf = (SubtypeOf<UnknownType, ReferenceTypes> || ...);

template<typename UnknownType, typename ...ReferenceTypes>
concept AnyBut = !AnyOf<UnknownType, ReferenceTypes...>;

namespace Utility {
	auto PointerDropQualifiers(auto Pointer) {
		using ReferencedType = std::remove_cvref_t<decltype(*Pointer)>;
		return const_cast<ReferencedType*>(Pointer);
	}
	auto PointerAddConstQualifier(auto Pointer) {
		using ReferencedType = std::remove_cvref_t<decltype(*Pointer)>;
		return const_cast<const ReferencedType*>(Pointer);
	}
	auto Max(auto x, auto y) {
		return x > y ? x : y;
	}
	auto Min(auto x, auto y) {
		return x < y ? x : y;
	}
	auto Log2(auto x) {
		auto Exponent = 0;
		while (x != 1) {
			x >>= 1;
			++Exponent;
		}
		return Exponent;
	}
	auto TypeEraseIterableToTriplet(auto&& Entity) {
		if constexpr (Iterable<decltype(Entity)>) {
			auto Buffer = [&] {
				if constexpr (NativeArray<decltype(Entity)>)
					return std::vector<std::decay_t<decltype(Entity[0])>>{};
				else
					return std::vector<std::decay_t<decltype(*Entity.begin())>>{};
			}();
			for (auto&& x : Entity)
				if constexpr (std::is_rvalue_reference_v<decltype(Entity)>)
					Buffer.push_back(std::move(x));
				else
					Buffer.push_back(x);
			if (Buffer.size() >= 3)
				return std::array{ std::move(Buffer[0]), std::move(Buffer[1]), std::move(Buffer[2]) };
			else if (Buffer.size() == 2)
				return std::array{ std::move(Buffer[0]), Buffer[1], std::move(Buffer[1]) };
			else if (Buffer.size() == 1)
				return std::array{ Buffer[0], Buffer[0], std::move(Buffer[0]) };
			else
				throw RuntimeError{ "TypeEraseIterableToTriplet: failed to convert iterable object to std::array<auto, 3>." };
		}
		else
			return std::array{ Entity, Entity, Forward(Entity) };
	}
	auto ExposeCharPointerIfASCIZCompatibleOrDeepCopyIfNot(auto&& ReferenceString) {
		if constexpr (SubtypeOf<decltype(ReferenceString), std::string>)
			return ReferenceString.data();
		else if constexpr (requires { { Forward(ReferenceString) }->std::convertible_to<const char*>; })
			return static_cast<const char*>(Forward(ReferenceString));
		else if constexpr (Iterable<decltype(ReferenceString)> && requires { { *ReferenceString.begin() }->SubtypeOf<char>; })
			return std::string{ ReferenceString.begin(), ReferenceString.end() };
	}
	auto ExtractCharPointerFromASCIZFormattedString(auto&& FormattedString) {
		if constexpr (requires { FormattedString.data(); })
			return FormattedString.data();
		else
			return FormattedString;
	}
}

namespace Utility::Map {
	auto Create();
	auto ListKeys(auto);
	auto Fill(auto, auto&&, auto&&, auto&&...);
	auto CheckForError(auto);
	auto DeduceReturnKey(auto, auto);
	template<auto = true, auto = true>
	auto AccessItem(auto, auto&&);
}

namespace Utility::PaddingFunctions {
	auto ReflectCoordinate(auto x, auto Bound) {
		while (x < 0 || x >= Bound) {
			x = std::abs(x);
			x -= Bound - 1;
			x = -std::abs(x);
			x += Bound - 1;
		}
		return x;
	}
}