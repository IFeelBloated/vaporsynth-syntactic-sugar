#pragma once
#include "Map.vxx"

struct Plugin {
	field(Handle, static_cast<VSPlugin*>(nullptr));
	field(FunctionSignatures, std::unordered_map<std::string, std::string>{});

private:
	using HandleType = const VSPlugin*;

private:
	struct Function {
		field(Handle, static_cast<VSPlugin*>(nullptr));
		field(Name, ""s);
		field(Signature, ""s);

	public:
		auto operator()(auto&& ...Arguments) const requires (sizeof...(Arguments) % 2 == 0) {
			auto ArgumentMap = Utility::Map::Create();
			if constexpr (sizeof...(Arguments) != 0)
				Utility::Map::Fill(ArgumentMap.Handle, Forward(Arguments)...);
			auto ResultMap = VaporGlobals::API->invoke(Handle, Name.data(), ArgumentMap.Handle);
			auto ResultItem = Utility::Map::AccessItem<true, false>(ResultMap, Utility::Map::DeduceReturnKey(ResultMap, "clip"sv));
			if (auto [EvaluationFailed, ErrorMessage] = Utility::Map::CheckForError(ResultMap); EvaluationFailed)
				throw RuntimeError{ ErrorMessage };
			return ResultItem;
		}
	};

public:
	Plugin() = default;
	Plugin(ExplicitlyConvertibleTo<HandleType> auto&& Descriptor) {
		auto PluginHandle = static_cast<HandleType>(Forward(Descriptor));
		this->Handle = Utility::PointerDropQualifiers(PluginHandle);
		for (auto FunctionMap = MapReference{ VaporGlobals::API->getFunctions(this->Handle) }; auto x : Utility::Map::ListKeys(FunctionMap.Handle))
			this->FunctionSignatures[std::string{ x }] = static_cast<std::string>(Utility::Map::AccessItem(FunctionMap.Handle, x)).erase(0, x.size() + 1);
	}

public:
	auto operator[](ExplicitlyConvertibleTo<std::string> auto&& FunctionName) const {
		auto Name = static_cast<std::string>(Forward(FunctionName));
		auto& Signature = Utility::PointerDropQualifiers(this)->FunctionSignatures[Name];
		return Function{ .Handle = Handle, .Name = std::move(Name), .Signature = Signature };
	}
	auto ListFunctions() const & {
		auto FunctionNames = std::vector<std::string_view>{};
		FunctionNames.reserve(FunctionSignatures.size());
		for (auto&& [x, _] : FunctionSignatures)
			FunctionNames.push_back(x);
		return FunctionNames;
	}
	auto ListFunctions() && {
		auto FunctionNames = std::vector<std::string>{};
		FunctionNames.reserve(FunctionSignatures.size());
		for (auto&& [x, _] : FunctionSignatures)
			FunctionNames.push_back(std::move(x));
		return FunctionNames;
	}
	auto Path() const {
		return std::filesystem::path{ VaporGlobals::API->getPluginPath(Handle) };
	}
};