#pragma once
#include "Map.vxx"

struct Plugin : PluginInfo {
	field(Handle, static_cast<VSPlugin*>(nullptr));
	field(FilePath, std::filesystem::path{});

private:
	struct Function {
		field(PluginHandle, static_cast<const Plugin*>(nullptr));
		field(Signature, ""s);

	public:
		auto operator()(auto&& ...Arguments) const requires (sizeof...(Arguments) % 2 == 0) {
			auto ArgumentMap = Utility::Map::Create();
			if constexpr (sizeof...(Arguments) != 0)
				Utility::Map::Fill(ArgumentMap.Handle, Forward(Arguments)...);
			auto ResultMap = UniversalContext::API->invoke(PluginHandle->Handle, Utility::SignatureParser::DeduceFunctionName(Signature).data(), ArgumentMap.Handle);
			auto ResultItem = Utility::Map::Item<true, false>{ ResultMap, Utility::Map::DeduceReturnKey(ResultMap, "clip"sv) };
			if (auto [EvaluationFailed, ErrorMessage] = Utility::Map::CheckForError(ResultMap); EvaluationFailed)
				throw std::runtime_error{ ErrorMessage };
			return ResultItem;
		}

	public:
		explicit operator auto() const {
			auto StringRepresentation = std::ostringstream{};
			StringRepresentation << "Namespace: " << PluginHandle->Namespace << "\n";
			StringRepresentation << "Signature: " << Signature;
			return StringRepresentation.str();
		}
	};

public:
	auto operator[](ExplicitlyConvertibleTo<std::string> auto&& FunctionName) const {
		auto Name = static_cast<std::string>(Forward(FunctionName));
		auto ParameterList = static_cast<std::string>(Utility::Map::Item<true, false>{ UniversalContext::API->getFunctions(Handle), Name }).erase(0, Name.size() + 1);
		if (ParameterList.size() > 0)
			ParameterList.pop_back();
		return Function{ .PluginHandle = this, .Signature = std::move(Name) + "(" + Utility::SignatureParser::Tokenizer::Replace(std::move(ParameterList), ":data", ":string", ":frame", ":vframe", ":clip", ":vnode", ":opt", "?", ";", ", ", ":", ": ", R"(:([^,]+)(?=,[^:]+:\1(?=,|$)))", "", R"((?![, ])([^:]+): ([^,]+))", "[$1]: $2", R"(\[([^\]|,]+)\]: ([^,]+))", "$1: $2") + ")" };
	}
	auto ListFunctions() const {
		auto FunctionNames = std::vector<std::string>{};
		for (auto FunctionMap = Utility::Map::Reference{ UniversalContext::API->getFunctions(Handle) }; auto&& x : Utility::Map::ListKeys(FunctionMap.Handle))
			FunctionNames.push_back(std::string{ x });
		return FunctionNames;
	}

public:
	explicit operator auto() const {
		auto StringRepresentation = std::ostringstream{};
		auto& Descriptor = static_cast<const PluginInfo&>(*this);
		StringRepresentation << static_cast<std::string>(Descriptor) << "\n";
		StringRepresentation << "File Path: " << FilePath.string() << "\n---- Function List ----";
		for (auto&& x : ListFunctions())
			StringRepresentation << "\n" << operator[](x).Signature;
		return StringRepresentation.str();
	}
};