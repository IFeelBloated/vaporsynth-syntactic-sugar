#pragma once
#include "Plugin.vxx"
#include "Logger.vxx"

struct CoreProxy {
	field(Handle, static_cast<VSCore*>(nullptr));

public:
	auto Query() {
		auto CoreInfoBuffer = VSCoreInfo{};
		VaporGlobals::API->getCoreInfo2(Handle, &CoreInfoBuffer);
		return CoreInfo{
			.Version = CoreInfoBuffer.versionString, .CoreVersion = CoreInfoBuffer.core, .APIVersion = CoreInfoBuffer.api,
			.ThreadCount = CoreInfoBuffer.numThreads,
			.MaxFrameBufferSize = CoreInfoBuffer.maxFramebufferSize, .UsedFrameBufferSize = CoreInfoBuffer.usedFramebufferSize
		};
	}
	auto& Query(AnyOf<VideoFormats, VSPresetFormat> auto FormatID) const {
		if (auto FormatHandle = VaporGlobals::API->getFormatPreset(static_cast<int>(FormatID), Handle); FormatHandle != nullptr)
			return VideoFormat::AdjustToStandardLayout(*FormatHandle);
		else
			return VaporGlobals::IndeterminateVideoFormat;
	}
	auto& Query(AnyOf<VideoFormat, VSFormat> auto&& Format) const {
		auto [ColorFamily, SampleType, BitsPerSample, _, HorizontalSubsamplingFactor, VerticalSubsamplingFactor, __] = VideoFormat::AdjustToStandardLayout(Format);
		if (auto FormatHandle = VaporGlobals::API->registerFormat(static_cast<int>(ColorFamily), static_cast<int>(SampleType), BitsPerSample, HorizontalSubsamplingFactor, VerticalSubsamplingFactor, Handle); FormatHandle != nullptr)
			return VideoFormat::AdjustToStandardLayout(*FormatHandle);
		else
			return VaporGlobals::IndeterminateVideoFormat;
	}
	auto Query(AnyOf<AudioFormat> auto&&) const {
		//Placeholder for API v4.
		return AudioFormat{};
	}
	auto Query(ExplicitlyConvertibleTo<std::string> auto&& PluginID) const {
		auto ID = Utility::ExposeCharPointerIfASCIZCompatibleOrDeepCopyIfNot(PluginID);
		auto PluginHandle = VaporGlobals::API->getPluginById(Utility::ExtractCharPointerFromASCIZFormattedString(ID), Handle);
		if (PluginHandle == nullptr)
			throw RuntimeError{ "Query: plugin with the specified identifier "s + std::move(ID) + " not found." };
		return Plugin{ PluginHandle };
	}

public:
	auto AllocateVideoFrame(auto&& FormatDescriptor, std::integral auto Width, std::integral auto Height) const {
		auto FormatHandle = [&] {
			if constexpr (requires { { Query(FormatDescriptor) }->SubtypeOf<VideoFormat>; })
				return &VideoFormat::AdjustToLegacyLayout(Query(FormatDescriptor));
			else
				static_assert(sizeof(FormatDescriptor) == -1, "AllocateVideoFrame: failed to recognize the specified format descriptor.");
		}();
		return FrameReference{ VaporGlobals::API->newVideoFrame(FormatHandle, Width, Height, nullptr, Handle) };
	}
	auto AllocateAudioFrame(auto&&, auto) const {
		//Placeholder for API v4.
		return FrameReference{};
	}
	auto CreateBlankFrameFrom(SubtypeOf<FrameReference> auto&& ReferenceFrame) const {
		if constexpr (requires { { ReferenceFrame.ExtractFormat() }->SubtypeOf<VideoFormat>; }) {
			using PixelType = std::decay_t<decltype(ReferenceFrame[0][0][0])>;
			auto FormatHandle = &VideoFormat::AdjustToLegacyLayout(Query(ReferenceFrame.ExtractFormat()));
			auto PropertyHandle = ReferenceFrame.Handle;
			return VideoFrame<PixelType>{ VaporGlobals::API->newVideoFrame(FormatHandle, ReferenceFrame[0].Width, ReferenceFrame[0].Height, PropertyHandle, Handle) };
		}
		else if constexpr (requires { { ReferenceFrame.ExtractFormat() }->SubtypeOf<AudioFormat>; })
			//Placeholder for API v4.
			return AudioFrame<void>{};
		else
			return WritableFrame{ VaporGlobals::API->copyFrame(ReferenceFrame.Handle, Handle) };
	}
	auto ShufflePlanes(auto&& Frames, auto&& PlaneIndexes, AnyOf<ColorFamilies, VSColorFamily> auto ColorFamily) const {
		auto ValidateInputs = [&](auto& PrimaryFrame, auto PlaneIndex, auto& SubsidiaryPlane1, auto& SubsidiaryPlane2) {
			static_assert(SubtypeOf<decltype(PrimaryFrame), FrameReference>, "ShufflePlanes: you must specify a frame or any iterable frame container.");
			static_assert(requires { { PrimaryFrame.ExtractFormat() }->SubtypeOf<VideoFormat>; }, "ShufflePlanes: specified frames must be video frames.");
			static_assert(IntegralOrEnumerable<decltype(PlaneIndex)>, "ShufflePlanes: plane index must be an integer.");
			if (SubsidiaryPlane1.Width != SubsidiaryPlane2.Width || SubsidiaryPlane1.Height != SubsidiaryPlane2.Height)
				throw RuntimeError{ "ShufflePlanes: subsidiary planes have inconsistent dimensions." };
		};
		auto DeduceFormat = [&](auto& ReferenceFormat, auto& PrimaryPlane, auto& SubsidiaryPlane) {
			auto Format = VideoFormat{
				.ColorFamily = static_cast<ColorFamilies>(ColorFamily),
				.SampleType = ReferenceFormat.SampleType, .BitsPerSample = ReferenceFormat.BitsPerSample,
				.HorizontalSubsamplingFactor = Utility::Log2(PrimaryPlane.Width / SubsidiaryPlane.Width), .VerticalSubsamplingFactor = Utility::Log2(PrimaryPlane.Height / SubsidiaryPlane.Height)
			};
			if (SubsidiaryPlane.Width << Format.HorizontalSubsamplingFactor != PrimaryPlane.Width || SubsidiaryPlane.Height << Format.VerticalSubsamplingFactor != PrimaryPlane.Height)
				throw RuntimeError{ "ShufflePlanes: assembling specified planes leads to invalid subsampling factor." };
			if (Format.IsRGB())
				if (Format.HorizontalSubsamplingFactor != 0 || Format.VerticalSubsamplingFactor != 0)
					throw RuntimeError{ "ShufflePlanes: RGB cannot be subsampled." };
			return &VideoFormat::AdjustToLegacyLayout(Query(Format));
		};
		auto&& [Frame1, Frame2, Frame3] = Utility::TypeEraseIterableToTriplet(Forward(Frames));
		auto [x1, x2, x3] = Utility::TypeEraseIterableToTriplet(Forward(PlaneIndexes));
		ValidateInputs(Frame1, x1, Frame2[x2], Frame3[x3]);
		using PixelType = std::decay_t<decltype(Frame1[0][0][0])>;
		auto FormatHandle = DeduceFormat(Frame1.ExtractFormat(), Frame1[x1], Frame2[x2]);
		auto FrameHandles = std::array{ Frame1.Observe(), Frame2.Observe(), Frame3.Observe() };
		auto Specifiers = std::array{ static_cast<int>(x1), static_cast<int>(x2), static_cast<int>(x3) };
		auto PropertyHandle = Frame1.Handle;
		return VideoFrame<PixelType>{ VaporGlobals::API->newVideoFrame2(FormatHandle, Frame1[x1].Width, Frame1[x1].Height, FrameHandles.data(), Specifiers.data(), PropertyHandle, Handle) };
	}
	auto ShuffleChannels(auto&&, auto&&, auto&&) const {
		//Placeholder for API v4.
		return AudioFrame<void>{};
	}
	auto CopyFrame(SubtypeOf<FrameReference> auto&& ReferenceFrame) const {
		auto FrameHandle = VaporGlobals::API->copyFrame(ReferenceFrame.Handle, Handle);
		if constexpr (requires { { ReferenceFrame.ExtractFormat() }->SubtypeOf<VideoFormat>; })
			return VideoFrame<std::decay_t<decltype(ReferenceFrame[0][0][0])>>{ FrameHandle };
		else if constexpr (requires { { ReferenceFrame.ExtractFormat() }->SubtypeOf<AudioFormat>; })
			//Placeholder for API v4.
			return AudioFrame<void>{};
		else
			return WritableFrame{ FrameHandle };
	}

public:
	auto Mount(auto&& FunctionEntity) const {
		using FunctionType = std::decay_t<decltype(FunctionEntity)>;
		auto FunctionHandle = new auto{ Forward(FunctionEntity) };
		auto FunctionRecycler = [](auto FunctionPointer) {
			auto Garbage = reinterpret_cast<FunctionType*>(FunctionPointer);
			delete Garbage;
		};
		auto FunctionProxy = [](auto InputMap, auto OutputMap, auto FunctionPointer, auto CoreHandle, auto...) {
			auto Arguments = ArgumentList{ .Handle = InputMap };
			auto FunctionHandle = reinterpret_cast<FunctionType*>(FunctionPointer);
			auto Core = CoreProxy{ .Handle = CoreHandle };
			auto FunctionInvoker = [&] {
				if constexpr (auto& MountedFunction = *FunctionHandle; requires { MountedFunction(); })
					return MountedFunction();
				else if constexpr (requires { MountedFunction(Arguments); })
					return MountedFunction(Arguments);
				else if constexpr (requires { MountedFunction(Arguments, Core); })
					return MountedFunction(Arguments, Core);
				else
					static_assert(sizeof(MountedFunction) == -1, "Mount: failed to mount the specified object, it is either not callable or has an incompatible signature.");
			};
			try {
				if constexpr (auto ResultItem = Utility::Map::AccessItem<false>(OutputMap, "val"); requires { { FunctionInvoker() }->AnyBut<void>; })
					ResultItem += FunctionInvoker();
				else
					FunctionInvoker();
			}
			catch (RuntimeError& ErrorMessage) {
				VaporGlobals::API->setError(OutputMap, ErrorMessage.data());
			}
		};
		return Function{ VaporGlobals::API->createFunc(FunctionProxy, FunctionHandle, FunctionRecycler, Handle, VaporGlobals::API) };
	}

public:
	auto TetherLogger(auto&& MessageLogger) const {
		using LoggerType = std::decay_t<decltype(MessageLogger)>;
		auto LoggerHandle = new auto{ Forward(MessageLogger) };
		auto LoggerRecycler = [](auto LoggerPointer) {
			auto Garbage = reinterpret_cast<LoggerType*>(LoggerPointer);
			delete Garbage;
		};
		auto LoggerProxy = [](auto MessageType, auto Message, auto LoggerPointer) {
			auto LoggerHandle = reinterpret_cast<LoggerType*>(LoggerPointer);
			if constexpr (auto& TetheredLogger = *LoggerHandle; requires { TetheredLogger(""sv); })
				TetheredLogger(std::string_view{ Message });
			else if constexpr (requires { TetheredLogger(Message); })
				TetheredLogger(Message);
			else if constexpr (requires { TetheredLogger(MessageTypes::Debug, ""sv); })
				TetheredLogger(static_cast<MessageTypes>(MessageType), std::string_view{ Message });
			else if constexpr (requires { TetheredLogger(MessageTypes::Debug, Message); })
				TetheredLogger(static_cast<MessageTypes>(MessageType), Message);
			else if constexpr (requires { TetheredLogger(VSMessageType::mtDebug, ""sv); })
				TetheredLogger(static_cast<VSMessageType>(MessageType), std::string_view{ Message });
			else if constexpr (requires { TetheredLogger(VSMessageType::mtDebug, Message); })
				TetheredLogger(static_cast<VSMessageType>(MessageType), Message);
			else
				static_assert(sizeof(TetheredLogger) == -1, "TetherLogger: failed to tether the specified logger, it is either not callable or has an incompatible signature.");
		};
		auto LoggerID = VaporGlobals::API->addMessageHandler(LoggerProxy, LoggerRecycler, LoggerHandle);
		auto MangledLoggerID = static_cast<std::intptr_t>(~LoggerID);
		auto LoggerDescriptor = reinterpret_cast<VSLogHandle*>(MangledLoggerID);
		return Logger{ LoggerDescriptor, LoggerHandle, LoggerProxy };
	}
	auto InstallLogger(auto&& MessageLogger) const {
		auto InstalledLogger = TetherLogger(Forward(MessageLogger));
		InstalledLogger.Detach();
		return InstalledLogger;
	}
	auto LogMessage(AnyOf<MessageTypes, VSMessageType> auto MessageType, ExplicitlyConvertibleTo<std::string> auto&& Message) const {
		auto FormattedMessage = Utility::ExposeCharPointerIfASCIZCompatibleOrDeepCopyIfNot(Message);
		VaporGlobals::API->logMessage(static_cast<int>(MessageType), Utility::ExtractCharPointerFromASCIZFormattedString(FormattedMessage));
	}
	auto DebugPrint(ExplicitlyConvertibleTo<std::string> auto&& Message) const {
		LogMessage(MessageTypes::Debug, Message);
	}
	auto Print(ExplicitlyConvertibleTo<std::string> auto&& Message) const {
		LogMessage(MessageTypes::Information, Message);
	}
	auto Alert(ExplicitlyConvertibleTo<std::string> auto&& Message) const {
		LogMessage(MessageTypes::Warning, Message);
	}
	auto CriticalAlert(ExplicitlyConvertibleTo<std::string> auto&& Message) const {
		LogMessage(MessageTypes::Critical, Message);
	}
	auto Abort(ExplicitlyConvertibleTo<std::string> auto&& Message) const {
		LogMessage(MessageTypes::Fatal, Message);
	}

public:
	auto SetMaxCacheSize(std::integral auto Bytes) const {
		return VaporGlobals::API->setMaxCacheSize(Bytes, Handle);
	}
	auto SetThreadCount(std::integral auto Threads) const {
		return VaporGlobals::API->setThreadCount(Threads, Handle);
	}
	auto ListPlugins() const {
		auto PluginSignatures = std::vector<std::string>{};
		for (auto PluginMap = MapReference{ VaporGlobals::API->getPlugins(Handle) }; auto x : Utility::Map::ListKeys(PluginMap.Handle))
			PluginSignatures.push_back(Utility::Map::AccessItem(PluginMap.Handle, x));
		return PluginSignatures;
	}
	auto operator[](ExplicitlyConvertibleTo<std::string> auto&& PluginNamespace) const {
		auto Namespace = Utility::ExposeCharPointerIfASCIZCompatibleOrDeepCopyIfNot(PluginNamespace);
		auto PluginHandle = VaporGlobals::API->getPluginByNs(Utility::ExtractCharPointerFromASCIZFormattedString(Namespace), Handle);
		if (PluginHandle == nullptr)
			throw RuntimeError{ "Core: No attribute with the name "s + std::move(Namespace) + " exists. Missing plugin?" };
		return Plugin{ PluginHandle };
	}
	operator auto() const {
		return Handle;
	}
};

struct CoreInstantiator : CoreProxy {
private:
	using CoreReference = ExclusiveOwner<VSCore, false>;

public:
	field(Anchor, std::shared_ptr<CoreReference>{});

public:
	CoreInstantiator() : CoreInstantiator{ 0 } {}
	CoreInstantiator(std::integral auto Threads) {
		this->Handle = VaporGlobals::API->createCore(Threads);
		this->Anchor = std::make_shared<CoreReference>(this->Handle);
	}
};